require File.dirname(__FILE__) + '/../unit_test_helper'
require 'ceedling/generator_test_runner'


# redefine split for convenience of file content comparison in tests.
# this is needed because we're using the '<<' operator on real files in source but substituting
#  an array for file writes in the tests; the '<<' operator tacks on new lines when used with a file,
#  but, of course, does not do this when inserting into an array.
class String
  def newline_split(pattern=/\n/, limit=nil)
    return (split(pattern, limit)).map{|elem| elem + "\n"} if !limit.nil?
    return (split(pattern)       ).map{|elem| elem + "\n"}
  end
end


#NOTE: When using newline_split() & left_margin() to manage test code strings,
#      white space to the left of newlines in otherwise blank lines is important.
#      That is, *every* line in a test code block must be spaced over.


class GeneratorTestRunnerTest < Test::Unit::TestCase

  def setup
    objects = create_mocks(:configurator, :file_wrapper)
    @runner_utils = GeneratorTestRunner.new(objects)
  end

  def teardown
  end

  
  ######### find test cases #########
    
  should "find test case functions in preprocessed test file" do
    test_file = 'tests/test_me.c'
    
    test_me_c = %Q[
      #include "unity.h"
      #include "Oscar.h"
      #include "mock_abilly.h"
      #include "mock_and_roll.h "

      void test_some_stuff(void)
      {
        TEST_ASSERT_IGNORE("pay no attention to the test behind the curtain");
      }

       void  test_some_more_stuff ( void )
      {
        TEST_ASSERT_IGNORE("pay no attention to the test behind the curtain");
      }

      void test_some_non_void_param_stuff()
      {
        TEST_ASSERT_IGNORE("pay no attention to the test behind the curtain");
      }

      void
      test_some_multiline_test_case_action
      (void)
      {
        TEST_ASSERT_IGNORE("pay no attention to the test behind the curtain");
      }

    ].left_margin(0)
    
    @configurator.expects.project_use_preprocessor.returns(true)
    
    @file_wrapper.expects.read(test_file).returns(test_me_c)
    
    assert_equal(
      ['test_some_stuff',
       'test_some_more_stuff',
       'test_some_non_void_param_stuff',
       'test_some_multiline_test_case_action'
      ],
      @runner_utils.find_test_cases(test_file))
  end

  should "find test case functions in non-preprocessed test file (do some basic pre-processing with regex)" do
    test_file = 'tests/test_me.c'

    test_me_c = %Q[
        #include "unity.h"
        #include "Oscar.h"
        #include "mock_abilly.h"
        #include "mock_and_roll.h "

        #ifdef SOMETHING
        extern void test_a_thing_to_throw_off_scanning(void);
        #end

        //void test_some_stuff(void)
        //{
        //  TEST_ASSERT_IGNORE("pay no attention to the test behind the curtain");
        //}

        /*
         void  test_some_more_stuff ( void )
        {
          TEST_ASSERT_IGNORE("pay no attention to the test behind the curtain");
        }*/

        void test_some_non_void_param_stuff()
        {
          TEST_ASSERT_IGNORE("pay no attention to the test behind the curtain");
        }

        void
        test_some_multiline_test_case_action
        (void)
        {
          TEST_ASSERT_IGNORE("pay no attention to the test behind the curtain");
        }

      ].left_margin(0)

    @configurator.expects.project_use_preprocessor.returns(false)

    @file_wrapper.expects.read(test_file).returns(test_me_c)

    assert_equal(
      ['test_some_non_void_param_stuff',
       'test_some_multiline_test_case_action'
      ],
      @runner_utils.find_test_cases(test_file))
  end


  ######### header block #########

  should "create header block of include statements and internal variables for exception handling, mocks, and strict ordering" do
    file = []
    
    expected_output = %Q[
      /* AUTOGENERATED FILE. DO NOT EDIT. */
      #include "unity.h"
      #include "extra_thing1.h"
      #include "extra_thing2.h"
      #include <setjmp.h>
      #include <stdio.h>
      #include "CException.h"
      #include "mock_abc.h"
      #include "mock_123.h"

      int GlobalExpectCount;
      int GlobalVerifyOrder;
      char* GlobalOrderError;

      char MessageBuffer[50];
      ].left_margin(0)
    
    @configurator.expects.test_runner_includes.returns(['extra_thing1.h', 'extra_thing2.h'])
    @configurator.expects.project_use_exceptions.returns(true)
    @configurator.expects.extension_header.returns('.h')
    @configurator.expects.cmock_enforce_strict_ordering.returns(true)
        
    @runner_utils.create_header(file, ['mock_abc', 'mock_123'])
    
    assert_equal(expected_output.newline_split[1..-1], file)
  end

  should "create header block of include statements and internal variables for exception handling & mocks but without strict ordering" do
    file = []

    expected_output = %Q[
      /* AUTOGENERATED FILE. DO NOT EDIT. */
      #include "unity.h"
      #include "extra_thing1.h"
      #include "extra_thing2.h"
      #include <setjmp.h>
      #include <stdio.h>
      #include "CException.h"
      #include "mock_abc.H"
      #include "mock_123.H"

      char MessageBuffer[50];
      ].left_margin(0)

    @configurator.expects.test_runner_includes.returns(['extra_thing1.h', 'extra_thing2.h'])
    @configurator.expects.project_use_exceptions.returns(true)
    @configurator.expects.extension_header.returns('.H')
    @configurator.expects.cmock_enforce_strict_ordering.returns(false)

    @runner_utils.create_header(file, ['mock_abc', 'mock_123'])

    assert_equal(expected_output.newline_split[1..-1], file)
  end

  should "create header block of include statements and internal variables for no extra header files, exception handling, or mocks" do
    file = []

    expected_output = %Q[
      /* AUTOGENERATED FILE. DO NOT EDIT. */
      #include "unity.h"
      #include <setjmp.h>
      #include <stdio.h>

      char MessageBuffer[50];
      ].left_margin(0)

    @configurator.expects.test_runner_includes.returns([])
    @configurator.expects.project_use_exceptions.returns(false)

    @runner_utils.create_header(file, [])

    assert_equal(expected_output.newline_split[1..-1], file)
  end


  ######### extern block #########
    
  should "create extern block of setup, teardown, and test cases" do
    file = []

    expected_output = %Q[
      extern void setUp(void);
      extern void tearDown(void);

      extern void test_case1(void);
      extern void test_case2(void);
      extern void test_case3(void);
      ].left_margin(0)

    @runner_utils.create_externs(file, ['test_case1', 'test_case2', 'test_case3'])

    assert_equal(expected_output.newline_split, file)
  end


  should "create extern block of setup, teardown, and no test cases" do
    file = []

    expected_output = %Q[
      extern void setUp(void);
      extern void tearDown(void);
      ].left_margin(0)

    @runner_utils.create_externs(file, [])

    assert_equal(expected_output.newline_split, file)
  end


  ######### mock management #########

  should "create mock management block for given mock list with strict ordering" do
    file = []

    expected_output = %Q[
      static void CMock_Init(void)
      {
        GlobalExpectCount = 0;
        GlobalVerifyOrder = 0;
        GlobalOrderError = NULL;
        mock_thinger_Init();
        mock_stinger_Init();
        mock_zinger_Init();
      }

      static void CMock_Verify(void)
      {
        mock_thinger_Verify();
        mock_stinger_Verify();
        mock_zinger_Verify();
      }

      static void CMock_Destroy(void)
      {
        mock_thinger_Destroy();
        mock_stinger_Destroy();
        mock_zinger_Destroy();
      }

      void CMock_VerifyAndReset(void)
      {
        CMock_Verify();
        CMock_Destroy();
        CMock_Init();
      }
      ].left_margin(0)

    @configurator.expects.extension_header.returns('.h')
    @configurator.expects.cmock_enforce_strict_ordering.returns(true)

    @runner_utils.create_mock_management(file, ['mock_thinger.h', 'mock_stinger.h', 'mock_zinger.h'])

    assert_equal(expected_output.newline_split + ["\n"], file) # add newline array element that split won't do
  end

  should "create mock management block for given mock list without strict ordering" do
    file = []

    expected_output = %Q[
      static void CMock_Init(void)
      {
        mock_thinger_Init();
        mock_stinger_Init();
        mock_zinger_Init();
      }

      static void CMock_Verify(void)
      {
        mock_thinger_Verify();
        mock_stinger_Verify();
        mock_zinger_Verify();
      }

      static void CMock_Destroy(void)
      {
        mock_thinger_Destroy();
        mock_stinger_Destroy();
        mock_zinger_Destroy();
      }
      
      void CMock_VerifyAndReset(void)
      {
        CMock_Verify();
        CMock_Destroy();
        CMock_Init();
      }
      ].left_margin(0)

    @configurator.expects.extension_header.returns('.h')
    @configurator.expects.cmock_enforce_strict_ordering.returns(false)

    @runner_utils.create_mock_management(file, ['mock_thinger.h', 'mock_stinger.h', 'mock_zinger.h'])

    assert_equal(expected_output.newline_split + ["\n"], file) # add newline array element that split won't do
  end

  should "create empty mock management block for empty mock list" do
    file = []
    
    @runner_utils.create_mock_management(file, [])

    assert_equal([], file)
  end


  ######### runTest() #########

  should "create no runTest function if there's no test cases (to prevent unused function compilation warnings)" do
    file = []
    @runner_utils.create_runtest(file, [], [])
    assert_equal([], file)
  end

  should "create runTest function including mock and exception handling" do
    file = []
    
    expected_output = %Q[
      static void runTest(UnityTestFunction test)
      {
        if (TEST_PROTECT())
        {
          CEXCEPTION_T e;
          Try {
            CMock_Init();
            setUp();
            test();
            CMock_Verify();
          } Catch(e) { TEST_FAIL("Unhandled Exception!"); }
        }
        CMock_Destroy();
        if (TEST_PROTECT())
        {
          tearDown();
        }
      }
      ].left_margin(0)
    
    @configurator.expects.project_use_exceptions.returns(true)
    
    @runner_utils.create_runtest(file, ['mock_zinger.h'], ['test_icle.c', 'test_ing.c'])
    assert_equal(expected_output.newline_split, file)
  end

  should "create runTest function including mock handling but no exception handling" do
    file = []

    expected_output = %Q[
      static void runTest(UnityTestFunction test)
      {
        if (TEST_PROTECT())
        {
          CMock_Init();
          setUp();
          test();
          CMock_Verify();
        }
        CMock_Destroy();
        if (TEST_PROTECT())
        {
          tearDown();
        }
      }
      ].left_margin(0)

    @configurator.expects.project_use_exceptions.returns(false)

    @runner_utils.create_runtest(file, ['mock_zinger.h'], ['test_icle.c', 'test_ing.c'])
    assert_equal(expected_output.newline_split, file)
  end

  should "create runTest function including no mock handling but including exception handling" do
    file = []

    expected_output = %Q[
      static void runTest(UnityTestFunction test)
      {
        if (TEST_PROTECT())
        {
          CEXCEPTION_T e;
          Try {
            setUp();
            test();
          } Catch(e) { TEST_FAIL("Unhandled Exception!"); }
        }
        if (TEST_PROTECT())
        {
          tearDown();
        }
      }
      ].left_margin(0)

    @configurator.expects.project_use_exceptions.returns(true)

    @runner_utils.create_runtest(file, [], ['test_icle.c', 'test_ing.c'])
    assert_equal(expected_output.newline_split, file)
  end

  ######### main() #########

  should "create main function with test cases" do
    file = []

    expected_output = %Q[
      int main(void)
      {
        UnityBegin();
        Unity.TestFile = "TestMe.c";

        // RUN_TEST calls runTest
        RUN_TEST(test_a_little_test);
        RUN_TEST(test_a_wee_test);
        RUN_TEST(test_a_teeny_test);

        UnityEnd();
        return 0;
      }
      ].left_margin(0)

    @runner_utils.create_main(file, 'TestMe.c', ['test_a_little_test', 'test_a_wee_test', 'test_a_teeny_test'])
    assert_equal(expected_output.newline_split + ["\n"], file) # add newline array element that split won't do
  end

  should "create main function with no test cases" do
    file = []

    expected_output = %Q[
      int main(void)
      {
        UnityBegin();
        Unity.TestFile = "TestIfy.c";


        UnityEnd();
        return 0;
      }
      ].left_margin(0)

    @runner_utils.create_main(file, 'TestIfy.c', [])
    assert_equal(expected_output.newline_split + ["\n"], file) # add newline array element that split won't do
  end

end
